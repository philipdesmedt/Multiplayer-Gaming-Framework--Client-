package be.tbs.mgf.client;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.xmlpull.v1.XmlPullParserException;

import be.tbs.mgf.exceptions.JoinException;
import be.tbs.mgf.exceptions.LeaveException;
import be.tbs.mgf.exceptions.LetterException;
import be.tbs.mgf.exceptions.StatusException;
import be.tbs.mgf.exceptions.WordException;
import be.tbs.mgf.xml.XMLGregorianCalendar;

/**
 * Client class to execute various operations (Join, Leave, Status)
 * @author philip
 *
 */
public class Client {

	private static final String SCRABBLE_WORD = "http://scrabbledb.appspot.com/WordCheck";
	private static final String SCRABBLE_LETTER_REQUEST = "http://scrabbledb.appspot.com/LetterRequest";
	private static final String SCRABBLE_SWITCH_REQUEST = "http://scrabbledb.appspot.com/Switch";

	private static final String GOOGLE_ENDPOINT = "http://scrabbledb.appspot.com/cloudserve/GamingService.soap";
	private static final String NAMESPACE = "http://www.tbs.be/mgf/schemas";
	private static final String GOOGLE_JOIN_ACTION = "http://scrabbledb.appspot.com/Join";
	private static final String GOOGLE_LEAVE_ACTION = "http://scrabbledb.appspot.com/Leave";
	private static final String GOOGLE_STATUS_ACTION = "http://scrabbledb.appspot.com/Status";
	
	private static final String ENDPOINT = "http://192.168.1.3:8080/MGF_Apache/services/GamingServiceBindingPort";
	private static final String JOIN_ACTION = "http://192.168.1.3:8080/Join";
	private static final String LEAVE_ACTION = "http://192.168.1.3:8080/Leave";
	private static final String STATUS_ACTION = "http://192.168.1.3:8080/Status";
	
	/**
	 * Represents a join operation
	 * @param name - the player that wants to join the server
	 * @return the player id of the newly joined player, -1 if join failed
	 * @throws JoinException
	 */
	public static int join(String name) throws JoinException {
		SoapObject soapObject = makeRequest("JoinRequest", 1);
		
		SoapObject player = new SoapObject(NAMESPACE, "");
		PropertyInfo pi = newProperty(NAMESPACE, "PlayerName", name, String.class);
		player.addProperty(pi);
		soapObject.addProperty("n0:Player", player);
		
		SoapSerializationEnvelope envelope = makeEnvelope(soapObject);
		SoapObject result = call(envelope, JOIN_ACTION, ENDPOINT);
		
		SoapObject playerObj = null;
		try {
			playerObj = (SoapObject) result.getProperty("Player");
			if (playerObj != null)
				return Integer.valueOf((playerObj.getProperty(0).toString()));
		} catch (RuntimeException e) {
			try {
				playerObj = (SoapObject) result.getProperty("Error");
				if (playerObj != null) {
					SoapPrimitive code = (SoapPrimitive) playerObj.getProperty("Code");
					SoapPrimitive desc = (SoapPrimitive) playerObj.getProperty("Description");
					throw new JoinException("Error " + code.toString() + ": " + desc.toString());
				}
			} catch (RuntimeException e1) {	
				//throw new JoinException(result.toString());
				throw new JoinException("Error 0: Unexpected Error. Please try again.");
			}
		}
		return -1;
	}
	
	/**
	 * Represents a leave operation
	 * @param playerID - the player that wants to leave the server
	 * @return whether the leave operation was successful
	 * @throws LeaveException 
	 */
	public static boolean leave(int playerID) throws LeaveException {
		SoapObject soapObject = makeRequest("LeaveRequest", 1);
		
		SoapObject player = new SoapObject(NAMESPACE, "");
		PropertyInfo pi = newProperty(NAMESPACE, "PlayerID", playerID, Integer.class);
		player.addProperty(pi);
		soapObject.addProperty("n0:Player", player);
		
		SoapSerializationEnvelope envelope = makeEnvelope(soapObject);
		SoapObject result = call(envelope, LEAVE_ACTION, ENDPOINT);
		
		SoapPrimitive playerObj = null;
		try {
			playerObj = (SoapPrimitive) result.getProperty("PlayerID");
			if (playerObj != null) {
				if (Integer.valueOf((playerObj.toString())) == playerID)
					return true;
			}
		} catch (RuntimeException e) { 
			try {
				SoapObject errorObj = (SoapObject) result.getProperty("Error");
				if (errorObj != null) {
					SoapPrimitive code = (SoapPrimitive) errorObj.getProperty("Code");
					SoapPrimitive desc = (SoapPrimitive) errorObj.getProperty("Description");
					throw new LeaveException("Error " + code.toString() + ": " + desc.toString());
				}
			} catch (RuntimeException e1) {	
				throw new LeaveException("Error 0: Unexpected Error. Please try again.");
			}
		}
		return false;
	}
	
	/**
	 * Represents a status operation
	 * @throws StatusException 
	 */
	public static List<String> status(int playerID, String name, String value) throws StatusException {
		List<String> statusList = new ArrayList<String>();
		SoapObject soapObject = makeRequest("StatusRequest", 1);	
		
		SoapObject player = new SoapObject(NAMESPACE, "");
		PropertyInfo pi = newProperty(NAMESPACE, "PlayerID", playerID, Integer.class);
		player.addProperty(pi);
		soapObject.addProperty("n0:Player", player);
		
		//TODO: Add an attribute 'name'
		//if (name != "" && value != "") {
			SoapObject property = new SoapObject(NAMESPACE, "Property");
	    	property.addProperty(newProperty(NAMESPACE, "Name", name, String.class));
	    	property.addProperty(newProperty(NAMESPACE, "Value", value, String.class));
	    	property.addProperty(newProperty(NAMESPACE, "Player", playerID, Integer.class));
			soapObject.addProperty("n0:Property", property);			
		//}
		
		SoapSerializationEnvelope envelope = makeEnvelope(soapObject);
		SoapObject result = call(envelope, STATUS_ACTION, ENDPOINT);
		
		try {
			System.out.println("Parsing properties");
			for (int i = 0; i < result.getPropertyCount(); i++) {
				Object myproperty = result.getProperty(i);
				if (myproperty != null) {
					System.out.println("Property: " + myproperty.toString());
					statusList.add(myproperty.toString());
				}
			}
		} catch (RuntimeException e) {
			System.out.println(e.getMessage());
			throw new StatusException(e.getMessage());
		}
		return statusList;
	}
	
	/**
	 * Constructs a request SoapObject with given operation and framework version 
	 * @param operation - the operation to be performed
	 * @param version_number - the framework version number
	 * @return the constructed soapobject request message
	 */
	private static SoapObject makeRequest(String operation, int version_number) {
		SoapObject soapObject = new SoapObject(NAMESPACE, operation);
    	
    	PropertyInfo version = newProperty(NAMESPACE, "Version", version_number, Integer.class);
    	soapObject.addProperty(version);
    	
    	SoapObject ping = new SoapObject(NAMESPACE, "Ping");
    	String time = new XMLGregorianCalendar().toXML();
    	System.out.println("Time: " + time);
    	PropertyInfo timestamp = newProperty(NAMESPACE, "TimeStamp", time, String.class);
    	ping.addProperty(timestamp);
		soapObject.addProperty("n0:Ping", ping);
		
		return soapObject;
	}
	
	/**
	 * Constructs a soap envelope with a given body
	 * @param soapObject - the soapObject to be encapsulated
	 * @return the soap serialization envelope
	 */
	private static SoapSerializationEnvelope makeEnvelope(SoapObject soapObject) {
		SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
		envelope.implicitTypes = true;
		envelope.setAddAdornments(false);
		envelope.setOutputSoapObject(soapObject);
		
		return envelope;
	}
	
	/**
	 * Makes a call to the endpoint and returns the result in a soapobject
	 * @param soapObject - the soap message to be encapsulated in an envelope 
	 * @param action - the action to be performed on the endpoint
	 * @return the result of the call to the endpoint
	 */
	private static SoapObject call(SoapSerializationEnvelope envelope, String action, String my_endpoint) {
		SoapObject result = null;
		try {
			HttpTransportSE httpTransport = new HttpTransportSE(my_endpoint);
			httpTransport.call(action, envelope);
			result = (SoapObject) envelope.bodyIn;
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XmlPullParserException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * Generates a new PropertyInfo SOAP Object
	 * @param namespace - the namespace the property belongs to
	 * @param name - the name of the property
	 * @param value - the value of the property
	 * @param type - the type of the property
	 * @return the newly constructed property
	 */
	private static PropertyInfo newProperty(String namespace, String name, Object value, Object type) {
		PropertyInfo pi = new PropertyInfo();
		pi.namespace = namespace;
		pi.setName(name);
		pi.setValue(value);
		pi.setType(type);
		return pi;
	}
	
	public static boolean checkScrabbleMove(String word) throws WordException {
		SoapObject soapObject = new SoapObject(NAMESPACE, "WordCheck");
		soapObject.addProperty(newProperty(NAMESPACE, "Word", word, String.class));
		
		SoapSerializationEnvelope envelope = makeEnvelope(soapObject);
		SoapObject result = call(envelope, SCRABBLE_WORD, ENDPOINT);
		
		SoapPrimitive wordObj = null;
		try {
			wordObj = (SoapPrimitive) result.getProperty("Found");
			if (wordObj != null) {
				if (wordObj.toString().equals("true")) {
					return true;
				} else {
					return false;
				}
			}
		} catch (RuntimeException e) {
			//throw new WordException(result.toString() + "  " + wordObj.toString());
			throw new WordException("WordChecker :: Unexpected Error!");
		}
		return false;
	}
	
	public static List<String> getScrabbleLetters(int number) throws LetterException {
		List<String> letters = new ArrayList<String>();
		SoapObject soapObject = new SoapObject(NAMESPACE, "LetterRequest");
		soapObject.addProperty(newProperty(NAMESPACE, "Number", ""+number, String.class));
		
		SoapSerializationEnvelope envelope = makeEnvelope(soapObject);
		SoapObject result = call(envelope, SCRABBLE_LETTER_REQUEST, ENDPOINT);
		
		try {
			System.out.println("Adding new letters.");
			for (int i = 0; i < result.getPropertyCount(); i++) {
				Object myproperty = result.getProperty(i);
				if (myproperty != null) {
					System.out.println("Property: " + myproperty.toString());
					Character c = (myproperty.toString()).charAt(0);
					int ascii = Integer.valueOf(c);
					System.out.println("ASCII value: " + ascii);
					if (ascii > 64) {
						letters.add(myproperty.toString());
					}
				}
			}
		} catch (RuntimeException e) {
			throw new LetterException("Letters couldn't be retrieved from LetterPool.");
		}
		return letters;
	}
	
	public static String switchScrabbleLetter(String letter) throws LetterException {
		String l = "";
		SoapObject soapObject = new SoapObject(NAMESPACE, "SwitchRequest");
		soapObject.addProperty(newProperty(NAMESPACE, "Letter", letter, String.class));
		
		SoapSerializationEnvelope envelope = makeEnvelope(soapObject);
		SoapObject result = call(envelope, SCRABBLE_SWITCH_REQUEST, ENDPOINT);
		
		SoapPrimitive letterObj = null;
		try {
			letterObj = (SoapPrimitive) result.getProperty("Letter");
			l = letterObj.toString();
		} catch (RuntimeException e) {
			throw new LetterException("Letter couldn't be switched in LetterPool.");
		}
		return l;
	}
	
}
